# euler012.py
# https://projecteuler.net/problem=12

"""


The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

"""


# IMPORTS

import math

# METHODS
	
def nextTriangle(num, i):
	return num+i
	
def countDivisors(num):
	divisors = 0
	
	for j in range(1,int(math.sqrt(num))):
		if num % j == 0:
			divisors += 2

	if math.sqrt(num) * math.sqrt(num) == num:
		divisors -= 1
			
	return divisors
		
	
# MAIN

num = 0
i = 1
divs = countDivisors(num)

while divs < 500:
	num = nextTriangle(num,i)
	i += 1
	divs = countDivisors(num)
	#print str(num) + " - " + str(divs)

print str(num) + " " + str(countDivisors(num))